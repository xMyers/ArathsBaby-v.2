@page "/catalog"
@inject HttpClient Http
@inject IJSRuntime JS
@attribute [Authorize]

@{
    int count = 1;
}

<AuthorizeView Roles="Admin">
    <Authorized>
        <div>
            <a class="btn btn-success" href="addproduct">Agregar Producto</a>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>
<br />

<h1>Catálogo</h1>

@if (string.IsNullOrWhiteSpace(errorS) == false)
{
    <div class="h2">@errorS</div>
}
else if (product is null)
{
    <div class="h3">Cargando....</div>
}
else
{
    @foreach (var item in product)
    {
        <td>
            <div class="card" style="width: 18rem; margin-top:3rem; margin-right:3rem; margin-bottom:2rem; margin-left:3rem; position:initial">
                <img src="https://scontent.fntr8-1.fna.fbcdn.net/v/t1.0-9/107865247_704094323779323_2201784036865521556_n.jpg?_nc_cat=101&_nc_sid=8bfeb9&_nc_ohc=FwSgbE0cEAAAX92rcFt&_nc_ht=scontent.fntr8-1.fna&oh=4ec8b36ac7d0080b2f2bb3096b7b38cc&oe=5F37D400" class="card-img-top" alt="...">
                <div class="card-body">
                    <h2 class="card-title">@item.ProductName</h2>
                    <p class="card-text">@item.Description</p>
                    <h4 class="card-text">Stock</h4>
                    <p class="card-text">@item.UnitInStock</p>
                    <h4 class="card-text">Color</h4>
                    <p class="card-text">@item.Color</p>
                    <h3 class="card-text" style="align-content:center">$@item.Price</h3>
                    <p class="card-text">@item.CreationDate.ToShortDateString()</p>
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <a href="editproduct/@item.Id" class="btn btn-primary">Editar</a>
                            <button class="btn btn-danger" @onclick="@(() => EliminarProduct(item.Id))">Eliminar</button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </td>
        if ((count % 4) == 0 && count != product.Count())
        {
            @:<tr>
            @:</tr>
        }
        count++;
    }


}

@code {

    Product[] product { get; set; }
    private const string baseUrl = "https://localhost:44348/";
    string errorS;


    protected async override Task OnInitializedAsync()
    {

        await CargarProduct();

    }

    async Task CargarProduct()
    {
        try
        {
            product = await Http.GetJsonAsync<Product[]>($"{baseUrl}api/Product");
            errorS = null;
        }
        catch (Exception ex)
        {
            errorS = $"Error extraer datos: {ex.Message }";
        }
    }

    async Task EliminarProduct(int Id)
    {
        var productSelect = product.First(x => x.Id == Id);
        string messageConfirm = $"¿Esta seguro de eliminar el porducto {productSelect.Id}?";
        if (await JS.Confirm("Cuidado", messageConfirm, IJSExtensions.TypeMessageSweetAler.warning))
        {
            await Http.DeleteAsync($"{baseUrl}api/Product/{Id}");
            await CargarProduct();
        }

    }
}
